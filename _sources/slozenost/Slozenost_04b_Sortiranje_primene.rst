Неке примене сортирања
======================

Као што је речено у уводу овог дела, сортирање има многе важне примене.
Подсећамо да је брза претрага (бинарна претрага) сортираног низа или 
листе, као веома важна и честа примена сортирања обрађена у посебном 
поглављу. Овде ћемо илустровати неке једноставније, мање или више 
очигледне примене сортирања.

Обрада дупликата (поновљених вредности у низу)
----------------------------------------------
   
У неким задацима је потребно на неки начин обрадити све поновљене
вредности у низу (дупликате). Ефикасна решења се обично добијају након
што се низ претпроцесира коришћењем сортирања. Након сортирања низа
сви поновљени елементи се налазе један иза другога, што значајно онда
олакшава њихову обраду (за сваки елемент је веома једноставно
проверити колико пута се јавио у низу, па је самим тим једноставно
проверити и да ли је дупликат, уклонити дупликате и слично). Осим
сортирањем, обрада дупликата се може вршити и помоћу библиотечких
колекција (скупова, мултискупова и мапа тј. речника), о чему ће више
речи бити касније.

На пример, све јединствене вредности у датом низу неозначених целих
бројева можемо ефикасно одредити на следећи начин.

.. code:: csharp

   using System;
    
   class Program
   {
       static void Main(string[] args)
       {
           // ucitavamo niz
           int n = int.Parse(Console.ReadLine());
           uint[] a = new uint[n];
           for (int i = 0; i < n; i++)
               a[i] = uint.Parse(Console.ReadLine());
           // sortiramo niz
           Array.Sort(a);
           // brojimo prvi element i sve elemente koje su razliciti
           // od svojih prethodnika
           int brojRazlicitih = 1;
           for (int i = 1; i < a.Length; i++)
               if (a[i] != a[i-1])
                   brojRazlicitih++;
           Console.WriteLine(brojRazlicitih);
       }
   }

Задаци кроз које можеш да увежбаш ову примену сортирања се налазе на
страници "Обрада дупликата - задаци". 

.. comment

    -  Двоструки студент
    -  Неупарени елемент
    -  Највећи поновљени елемент
    -  Број различитих дужина дужи
    -  Најбројнији елемент


Груписање блиских вредности
---------------------------

Још једна примена сортирања долази од тога што се након сортирања
низа, елементи блиски по вредности нађу један близу другог. Ово нам
омогућава да у низу (након сортирања) ефикасно налазимо елементе који 
су што ближе један другом, као и групе што
блискијих елемената (са што мањом разликом између најмањег и највећег
елемента у групи).

Ову примену сортирања можеш да увежбаш кроз задатке који се налазе на
страници `Груписање блиских вредности - задаци <%D0%93%D1%80%D1%83%D0%BF%D0%B8%D1%81%D0%B0%D1%9A%D0%B5%20%D0%B1%D0%BB%D0%B8%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20-%20%D0%B7%D0%B0%D0%B4%D0%B0%D1%86%D0%B8.html>`_.

.. comment

    -  Најближе собе
    -  Праведна подела чоколадица
    -  Најбројнији подскуп који садржи узастопне целе бројеве   

Свођење на канонски облик
-------------------------

Често имамо потребу да проверимо да ли су два низа елемената једнака,
ако се занемари у ком су редоследу елементи наведени. Класичан пример
овога је провера да ли се једна реч може добити пермутовањем слова
друге (тј. да ли су анаграми). У суштини, ради се о поређењу два
мултискупа елемената (која су задата низовима). Најбољи начин да се
оваква једнакост провери је да се оба низа сведу на неки канонски
облик, који неће зависити од редоследа елемената
низа. Најједноставнији начин да се такав канонски облик добије је да
се елементи низа сортирају пре поређења. Други начин је да се изврши
пребројавање свих елемената тј. да се мултискупови представе
пресликавањима сваког елемента у његов број појављивања (два таква
пресликавања су једнака ако и само ако исти скуп кључева слика у исте
вредности).

На пример, провера да ли је један низ пермутација другог, може се
једноставно урадити на следећи начин.


.. code:: csharp
          
   using System;
    
   class Program
   {
       static int[] ucitajNiz()
       {
           int n = int.Parse(Console.ReadLine());
           int[] a = new int[n];
           for (int i = 0; i < n; i++)
               a[i] = int.Parse(Console.ReadLine());
           return a;
       }
       static bool jePermutacija(int[] a, int[] b)
       {
           if (a.Length != b.Length)
               return false;
           Array.Sort(a);
           Array.Sort(b);
           for (int i = 0; i < a.Length; i++)
               if (a[i] != b[i])
                   return false;
           return true;
       }
       
       static void Main(string[] args)
       {
           int[] a = ucitajNiz();
           int[] b = ucitajNiz();
           Console.WriteLine(jePermutacija(a, b) ? "da" : "ne");
       }
   }


У вези са свођењем на канонски облик, покушај да урадиш задатке 
са странице `Свођење на канонски облик - задаци <Свођење%20на%20канонски%20облик%20-%20задаци.html>`_.

.. comment
    %D0%A1%D0%B2%D0%BE%D1%92%D0%B5%D1%9A%D0%B5%20%D0%BD%D0%B0%20%D0%BA%D0%B0%D0%BD%D0%BE%D0%BD%D1%81%D0%BA%D0%B8%20%D0%BE%D0%B1%D0%BB%D0%B8%D0%BA%20-%20%D0%B7%D0%B0%D0%B4%D0%B0%D1%86%D0%B8.html

    -  Анаграм
    -  D-пермутација
    -  Анаграми

Сортирање интервала
-------------------

Многи проблеми се природно моделују интервалима (на пример, време
доласка и време одласка неке особе на посао, заузеће неке сале и
слично). Многи алгоритми који захтевају обраду неке колекције
интервала се ефикасније реализују ако се ти интервали обилазе у неком
редоследу. То може бити редослед одређен на основу почетка интервала,
на основу краја интервала, а често и редослед који редом обилази све
значајне тачке интервала (почетке и крајеве интервала) - у овом
случају се не обилазе сами интервали по неком реду, већ само њихове
значајне тачке.

Пробај да урадиш задатке са стране `Сортирање интервала - задаци <Сортирање%20интервала%20-%20задаци.html>`_,
у којима се колекције интервала сортирају у неки редослед да би се 
добило ефикасније решење.

.. comment

    - Најбројнији пресек интервала
    - Покривање праве затвореним интервалима

    http://127.0.0.1:8000/slozenost/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%B0%D1%9A%D0%B5%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B2%D0%B0%D0%BB%D0%B0%20-%20%D0%B7%D0%B0%D0%B4%D0%B0%D1%86%D0%B8.html

Остале примене сортирања
------------------------

Наведени примери сортирања сигурно не исцрпљују све употребе
сортирања. Многи други задаци могу да буду ефикасно решени 
захваљујући примени сортирања.

Пробај да применом сортирања ефикасно решиш и задатке са странице
`Остале примене сортирања - задаци <Остале%20примене%20сортирања%20-%20задаци.html>`_. 

.. comment

    - Хиршов h-индекс
    - Збир минимума тројки

    http://127.0.0.1:8000/slozenost/%D0%9E%D1%81%D1%82%D0%B0%D0%BB%D0%B5%20%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%20%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%B0%D1%9A%D0%B0%20-%20%D0%B7%D0%B0%D0%B4%D0%B0%D1%86%D0%B8.html