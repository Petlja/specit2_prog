Бинарна претрага преломне тачке
===============================

У свом најопштијем облику, бинарна претрага се може формулисати на
следећи начин. Размотримо низ елемената такав да су елементи подељени у
две групе, на основу неког својства :math:`P`. Елементи у почетном делу
низа су сви такви да немају то својство :math:`P`, а елементи у завршном
делу низа су сви такви да имају својство :math:`P`. Низ је, дакле,
облика ``-----++++++++``, где су са ``-`` означени елементи који немају,
а са ``+`` елементи који имају својство :math:`P`. Могућа је и ситуација
у којој је нека од група празна. Својство :math:`P` може бити сасвим
произвољно. На пример, у сортираном низу бројева, за дату вредност
:math:`X` можемо посматрати својство *већи је или једнак :math:`X`*.
Тада се у првом делу низа налазе елементи који нису већи или једнаки
:math:`X`, тј. строго су мањи од :math:`X`, док се иза њих налазе
елементи који имају својство, тј. већи су или једнаки :math:`X`. Даље,
на пример, низ ученика може бити организован тако да су прво наведени
дечаци, а затим девојчице.

Бинарна претрага нам може помоћи да ефикасно одредимо *преломну тачку*,
тј. место где престаје једна и почиње друга група елемената. То може
бити или позиција последњег елемента који нема својство :math:`P` или
првог елемента који има својство :math:`P`. Ако сви елементи низа имају
својство :math:`P`, тада претрага за позицијом последњег елемента низа
који нема својство треба да врати :math:`-1`. Ако ниједан елемент низа
нема својство :math:`P`, тада претрага за позицијом првог елемента низа
који има својство :math:`P` треба да врати дужину низа. Познавање
преломне тачке нам омогућава и да ефикасно одговоримо на питање колико
је елемената у свакој групи (колико елемената низа нема, а колико
елемената низа има својство :math:`P`).

Класична бинарна претрага се лако формулише као претрага преломне тачке.
Ако у низу пронађемо позицију првог елемента који је већи или једнак
траженој вредности :math:`X`, тада можемо проверити да ли је та позиција
унутар низа (строго мања од дужине низа) и да ли се на њој налази
елемент :math:`X` - ако је то испуњено елемент постоји у низу, а у
супротном не постоји. Прикажимо претрагу преломне тачке баш на том
примеру.


Уведимо променљиве :math:`l` и :math:`d` и наметнимо услов (инваријанту) да
све време током претраге важи :math:`0 \leq l \leq d+1 \leq n`, и да су

- елементи низа :math:`a` на позицијама из интервала :math:`[0, l)` мањи од
  :math:`X`, 
    
- елементи на позицијама из интервала :math:`(d, n)` већи или једнаки
  :math:`X`.
    
Елементима на позицијама из интервала :math:`[l, d]` статус још није
познат. Из ове инваријанте програм следи практично директно.  Када се
претрага заврши, важи да је :math:`l = d+1` и да се први елемент који
је већи или једнак од :math:`X` налази на позицији :math:`l`. Ако
такав елемент не постоји, тада је :math:`l` једнако дужини
низа. Тражени елемент :math:`x` постоји у низу ако и само ако је
:math:`l = d+1 < n` и ако је :math:`a_l = x`.

.. code:: csharp

   using System;

   class Program
   {
       // funkcija proverava da li se u datom sortiranom nizu a duzine n
       // nalazi element x
       static bool sadrzi(int[] a, int x) {
           // duzina niza
           int n = a.Length;
           
           // trazimo poziciju prvog elementa u nizu a koji je veci ili
           // jednak x
     
           // [0, l) - elementi strogo manji od x
           // (d, n) - elementi veci ili jednaki x
           // [l, d] - nepoznati elementi
           int l = 0, d = n - 1;
           // dok god taj interval nije prazan
           while (l <= d) {
               // nalazimo sredinu intervala
               int s = l + (d - l) / 2;
    
               if (a[s] >= x)
                   // posto je niz sortiran svi posle pozicije s-1 su
                   // veci ili jednaki x
                   d = s - 1;
               else
                   // posto je niz sortiran svi pre pozicije s+1 su
                   // strogo manji od x
                   l = s + 1;
           }
           // prvi veci ili jednak nalazi se na poziciji d+1 = l
    
           // x je u nizu ako i samo ako u nizu postoji element koji je
           // veci ili jednak x i ako je prvi takav element upravo x
           return l < n && a[l] == x;
       }
       
       static void Main()
       {
           // ucitavamo niz
           int n = int.Parse(Console.ReadLine());
           int[] a = new int[n];
           string[] str = Console.ReadLine().Split();
           for (int i = 0; i < n; i++)
               a[i] = int.Parse(str[i]);
           // broj onih koji postoje u nizu
           int broj = 0;
           // ucitavamo broj po broj do kraja ulaza
           string s;
           while ((s = Console.ReadLine()) != null) {
               int x = int.Parse(s);
               // ako je broj sadrzan u nizu, uvecavamo brojac
               if (sadrzi(a, x))
                   broj++;
           }
           // ispisujemo rezultat
           Console.WriteLine(broj);
       }
   }

Покушај да применом технике бинарне претраге преломне тачке решиш
задатке са следеће странице.

.. comment

    - Први већи и последњи мањи
    - Провера бар-кодова
    - Број такмичара изнад прага
    - Тастатура и миш
    - Кружне зоне
    - Разлика висина
    - Најближи датом елементу
    - Оптимални сервис
    - Први паран
    - Врх планине
    - К најближих датом
    - i-ти на месту i
    - Минимум ротираног сортираног низа
    - Претрага ротираног сортираног низа

