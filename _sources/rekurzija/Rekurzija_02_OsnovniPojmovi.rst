Рекурзија - основни појмови
===========================

Да бисте боље схватили принцип рекурзије у наставку ћемо решити
неколико веома једноставних задатака коришћењем рекурзије. Нагласимо
да би се овакви задаци у реалном програмирању решавали уз помоћ петљи
уместо рекурзијом, међутим, њиховим решавањем схватићете основне
принципе рекурзије чије ће коришћење бити веома пожељно у решавању
компликованијих задатака.

.. questionnote::

   Дефиниши рекурзивну функцију која израчунава збир :math:`1 + 2 +
   \ldots + (n-1) + n`.

Означимо збир првих :math:`n` природних бројева са :math:`Z(n)`.
Очигледно је да за :math:`n > 1` важи :math:`Z(n) = Z(n-1) + n`.

За :math:`n = 1` ова формула гласи :math:`Z(1) = Z(0) + 1`. Пошто знамо
да је :math:`Z(1) = 1`, да би формула :math:`Z(1) = Z(0) + 1` била тачна, 
усвојићемо да је :math:`Z(0) = 0`, то јест, прогласићемо да је збир 
првих :math:`0` природних бројева (тј. збир елемената празног скупа) по 
дефиницији једнак :math:`0`. На тај начин формула 
:math:`Z(n) = Z(n-1) + n` важи и за :math:`n = 1`.

Тако долазимо до формуле

:math:`Z(n) = \left\{\begin{array}{ll}0, & n = 0\\ Z(n-1) + n, & n > 0\end{array}\right.`

на основу које је једноставно написати рекурзивну функцију:

.. code-block:: csharp

   static int Zbir(int n)
   {
      if (n == 0)
         return 0;
      return Zbir(n-1) + n;
   }

Прикажимо корак по корак како се израчунава вредност израза
``Zbir(3)``.

``Zbir(3) = Zbir(2) + 3 = (Zbir(1) + 2) + 3 = ((Zbir(0) + 1) + 2) + 3 = ((0 + 1) + 2) + 3 = (1 + 2) + 3 = 3 + 3 = 6``
      

   
.. questionnote::

   Дефиниши  рекурзивну  функцију  која  израчунава  факторијел  броја
   :math:`n` тј. вредност :math:`n! = 1 \cdot 2 \cdot \ldots \cdot n`.

Решење овог задатка је веома слично претходном. Са :math:`F(n)` ћемо 
означити производ првих :math:`n` природних бројева. За :math:`n > 1` 
имамо :math:`F(n) = F(n-1) \cdot n`. То значи да производ првих :math:`n` 
природних бројева можемо да добијемо тако што производ свих бројева 
осим последњег помножимо са :math:`n`. 

Пошто хоћемо да ова реченица и формула важе и за :math:`n = 1`, уводимо 
(дефинишемо) :math:`F(0) = 1` и добијамо формулу

:math:`F(n) = \left\{\begin{array}{ll}1, & n = 0\\ F(n-1) \cdot n, & n > 0\end{array}\right.`

из које се директно изводи рекурзивна функција:

.. code-block:: csharp

   static int Faktorijel(int n)
   {
      if (n == 0)
         return 1;
      return Faktorijel(n-1) * n;
   }

Прикажимо корак по корак како се израчунава вредност израза
``Faktorijel(3)``.

``Faktorijel(3) = Faktorijel(2) * 3 = (Faktorijel(1) * 2) * 3 = ((Faktorijel(0) * 1) * 2) * 3 = ((1 * 1) * 2) * 3 = (1 * 2) * 3 = 2 * 3 = 6``

.. questionnote::

   Дефиниши рекурзивну функцију која израчунава степен :math:`x^n`, за
   реалну основу `x` и природан број `n` (укључујући и нулу).

За степеновање важи следеће:

:math:`x^n = \left\{\begin{array}{ll}1, & n = 0\\ x^{n-1}\cdot x, & n > 0\end{array}\right.`

На основу рекурзивне формуле, поново веома једноставно можемо дефинисати и рекурзивну функцију.

.. code-block:: csharp

   static double Stepen(double x, int n)
   {
      if (n == 0)
         return 1;
      return Stepen(n-1) * x;
   }

Приликом дефиниције рекурзивних функција чији су аргументи природни
бројеви, најчешће се разликује случај нуле (то је излаз из рекурзије) и
случај следбеника броја (тада се врши рекурзивни позив). Овај тип рекурзивних 
функција смо имали у сва три претходна примера.

Покушај сада самостално да решиш наредних неколико задатака.

.. questionnote::

   Дефиниши рекурзивну функцију која израчунава збир квадрата бројева
   од један до :math:`n` тј. вредност :math:`1^2 + 2^2 \cdot
   \ldots + n^2`.

.. questionnote::

   Дефиниши рекурзивну функцију која израчунава тзв. парно-непарни
   факторијел, односно број :math:`n\cdot(n-2)\cdot(n-4)\cdot \ldots
   \cdot 2` за парне вредности броја :math:`n`, тј. :math:`n\cdot
   (n-2) \cdot (n-4)\cdot \ldots \cdot 1` за непарне вредности броја
   :math:`n`.
   
Детаљни опис решења свих задатака из ове лекције можеш погледати у
наредном видео-снимку.
   
.. ytpopup:: N6w8vFotfhY
      :width: 735
      :height: 415
      :align: center


Ко жели да зна више?
''''''''''''''''''''

Рекурзија у математици омогућава дефинисање основних аритметичких
операција над природним бројевима. Чувени логичар Курт Гедел увео је
рекурзивне функције као основни механизам израчунавања, помоћу кога се
може прецизно дефинисати све оно што се може алгоритамски израчунати
тј. све оно што се може израчунати праћењем неког прецизно описаног
поступка (види чланке на Википедији о `μ-рекурзији
<https://sr.wikipedia.org/wiki/%CE%9C-%D1%80%D0%B5%D0%BA%D1%83%D1%80%D0%B7%D0%B8%D0%B2%D0%BD%D0%B0_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%98%D0%B0>`_
и о `примитивној рекурзији
<https://sr.wikipedia.org/wiki/Примитивна_рекурзивна_функција>`_).

Ако те занима да сазнаш како је коришћењем само нуле, следбеника и
механизма рекурзије могуће дефинисати основне аритметичке операције
над природним бројевима, можеш погледати наредни видео-снимак.

.. ytpopup:: rZ9PXy0zKuw
      :width: 735
      :height: 415
      :align: center
